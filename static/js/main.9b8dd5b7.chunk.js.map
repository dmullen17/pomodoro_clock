{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["accurateInterval","require","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isActive","time","breakTime","interval","decrementTime","bind","assertThisInitialized","startTimer","reset","timeToMMSS","toggleActive","setState","minutes","Math","floor","seconds","react_default","a","createElement","Container_default","className","fluid","Row_default","Col_default","id","App_TimerControl","name","nameId","onClick","React","Component","TimerControl","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2TAKIA,SAAmBC,EAAQ,KAGzBC,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,UAAU,EACVC,KAAM,KACNC,UAAW,IACXC,SAAU,IAEdX,EAAKY,cAAgBZ,EAAKY,cAAcC,KAAnBZ,OAAAa,EAAA,EAAAb,CAAAD,IACrBA,EAAKe,WAAaf,EAAKe,WAAWF,KAAhBZ,OAAAa,EAAA,EAAAb,CAAAD,IAClBA,EAAKgB,MAAQhB,EAAKgB,MAAMH,KAAXZ,OAAAa,EAAA,EAAAb,CAAAD,IACbA,EAAKiB,WAAajB,EAAKiB,WAAWJ,KAAhBZ,OAAAa,EAAA,EAAAb,CAAAD,IAClBA,EAAKkB,aAAelB,EAAKkB,aAAaL,KAAlBZ,OAAAa,EAAA,EAAAb,CAAAD,IAZLA,4EAefG,KAAKgB,SAAS,CACVR,SAAUf,EAAiBO,KAAKS,cAAe,+CAInDT,KAAKgB,SAAS,CACVV,KAAMN,KAAKI,MAAME,KAAO,oCAI5BN,KAAKgB,SAAS,CACVR,SAAU,4CAIdR,KAAKgB,SAAS,CACVX,UAAWL,KAAKI,MAAMC,gDAI1B,IAAIY,EAAUC,KAAKC,MAAMnB,KAAKI,MAAME,KAAO,IACvCc,EAAUpB,KAAKI,MAAME,KAAiB,GAAVW,EAGhC,OADAA,EAAUA,EAAU,GAAK,IAAMA,EAAUA,GACxB,KAFjBG,EAAUA,EAAU,GAAK,IAAMA,EAAUA,oCAKzC,OACAC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAWG,UAAU,MAAMC,OAAO,GAC9BL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAKG,UAAU,QACXJ,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAKG,UAAU,SACXJ,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAKG,UAAU,QAAQI,GAAG,aACrB7B,KAAKc,gBAIlBO,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAKG,UAAU,QACXJ,EAAAC,EAAAC,cAACO,EAAD,CAAcC,KAAK,iBAAiBC,OAAO,gBAAgB1B,KAAK,UAChEe,EAAAC,EAAAC,cAACO,EAAD,CAAcC,KAAK,eAAeC,OAAO,cAAc1B,KAAK,UAEpEe,EAAAC,EAAAC,cAAA,OAAKU,QAASjC,KAAKY,YAAnB,SACAS,EAAAC,EAAAC,cAAA,OAAKU,QAASjC,KAAKa,OAAnB,kBA1DMqB,IAAMC,WAiElBC,EAAe,SAACxC,GAClB,OACIyB,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAKG,UAAU,gBACXJ,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAKO,GAAIjC,EAAMoC,QAASpC,EAAMmC,MAC9BV,EAAAC,EAAAC,cAACI,EAAAL,EAAD,iBACAD,EAAAC,EAAAC,cAACI,EAAAL,EAAD,KAAM1B,EAAMU,MACZe,EAAAC,EAAAC,cAACI,EAAAL,EAAD,qBAOG3B,IC1EK0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9b8dd5b7.chunk.js","sourcesContent":["import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row'\nimport './App.css';\nvar accurateInterval = require('accurate-interval');\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isActive: true,\n            time: 1500, \n            breakTime: 300,\n            interval: ''\n        };\n        this.decrementTime = this.decrementTime.bind(this);\n        this.startTimer = this.startTimer.bind(this);\n        this.reset = this.reset.bind(this);\n        this.timeToMMSS = this.timeToMMSS.bind(this);\n        this.toggleActive = this.toggleActive.bind(this);\n    }\n    startTimer() {\n        this.setState({\n            interval: accurateInterval(this.decrementTime, 1000)\n        });\n    }\n    decrementTime() {\n        this.setState({\n            time: this.state.time - 1\n        });\n    }\n    reset() {\n        this.setState({\n            interval: ''\n        });\n    }\n    toggleActive() {\n        this.setState({\n            isActive: !this.state.isActive\n        });\n    }\n    timeToMMSS() {\n        let minutes = Math.floor(this.state.time / 60);\n        let seconds = this.state.time - minutes * 60;\n        seconds = seconds < 10 ? '0' + seconds : seconds;\n        minutes = minutes < 10 ? '0' + minutes : minutes;\n        return minutes + ':' + seconds;\n    }\n    render() {\n        return (\n        <div>\n            <Container className=\"App\" fluid={true}>\n                <Row className='row1'>\n                    <Col className='clock'>\n                        <Row className='timer' id='time-left'>\n                            {this.timeToMMSS()}\n                        </Row>\n                    </Col>\n                </Row>\n                <Row className='row2'>\n                    <TimerControl name='Session Length' nameId='session-label' time='25:00'/>\n                    <TimerControl name='Break Length' nameId='break-label' time='5:00'/>\n                </Row>\n            <div onClick={this.startTimer}>Start</div>\n            <div onClick={this.reset}>Reset</div>\n            </Container>\n        </div>\n  );\n}\n}\n\nconst TimerControl = (props) => {\n    return (\n        <Col className='TimerControl'>\n            <Row id={props.nameId}>{props.name}</Row>\n            <Row>Up arrow</Row>\n            <Row>{props.time}</Row>\n            <Row>Down Arrow</Row>\n        </Col>\n    )\n}\n\n// need a seconds to mm::ss function\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}